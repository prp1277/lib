plot(cars)
library("httr", lib.loc="~/R/win-library/3.5")
library(httr)
r <- GET("http://httpbin.org/get")
r
http_status(r)
str(content(r, "parsed"))
library(httr)
r <- GET("http://httpbin.org/get")
http_status(r)
#
bin <- content(r, "parsed") # Assign a bin
str(bin)   # View as named list
writeBin(bin, "myfile.txt") # Print to file
library(httr)
api <- GET("https://api.iextrading.com/1.0/stock/market/batch?symbols=aapl,fb&types=quote,news,chart&range=1m&last=5")
http_status(api)
#
bin <- content(api, "parsed") # Assign a bin
str(bin)   # View as named list
bin
view(bin)
View(bin)
# Walking through API interaction using httr
library(httr)
github_api <- function(path){
url <- modify_url("https://api.github.com", path = path)
GET(url)
}
# Walking through API interaction using httr
library(httr)
ua <- user_agent("https://github.com/prp1277/lib")
ua
github_api <- function(path){
url <- modify_url("https://api.github.com", path = path)
resp <- GET(url, ua)
if (http_type(resp) !="application/json"){
stop("API did not return json", call. = FALSE)
} # End if
parsed <- jsonlite::fromJSON(content(resp, "text"), simplifyVector = FALSE)
if (status_code(resp) != 200) {
stop(
sprintf(
"GitHub API Request Failed [%s]\n%s\n<%s>",
status_code(resp),
parsed$message,
parsed$documentation_url
),
call. = FALSE
)
}
structure(
list(
content = parsed,
path = path,
response = resp
),
class = "github_api"
)
} # End function(path)
View(github_api)
print.github_api <- function(x, ...) {
cat("<GitHub", x$path, ">\n", sep = "")
str(x$content)
invisible(x)
}
github_api("/users/prp1277")
rate_limit <- function() {
github_api("/rate_limit")
}
rate_limit()
rate_limit <- function() {
req <- github_api("/rate_limit")
core <- req$content$resources$core
reset <- as.POSIXct(core$reset, origin = "1970-01-01")
cat(core$remaining, " / ", core$limit,
" (Resets at ", strftime(reset, "%H:%M:%S"), ")\n", sep = "")
}
rate_limit()
